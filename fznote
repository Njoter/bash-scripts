#!/bin/bash

program_name=$(basename "$0")
no_notes_message="You have no notes. Create one with $program_name -a [filename]"
no_selection_message="No file selected."

source ~/.config/fznote/fznote.conf


add () {
    if [ -f "$directory$1" ]
    then
        echo "$1 already exists."
    else
        $EDITOR "$directory$1"
    fi
}


view () {
    file=$(echo $directory$(list_files))
    if file_selected $file
    then
        $reader "$file"
    else
        echo $no_selection_message
    fi
}


edit () {
    file=$(echo $directory$(list_files))
    if file_selected $file
    then
        $EDITOR "$file"
    else
        echo $no_selection_message
    fi
}


remove () {
    file=$(echo $directory$(list_files))
    if file_selected "$file"
    then
        if yes_or_no "Are you sure you want to delete $file?"
        then
            rm "$file"
        fi
    else
        echo $no_selection_message
    fi
}


push () {

    cd $directory

    if ! is_git_repository
    then
        if yes_or_no "Do you want to make $directory a git repository?"
        then
            git init
        else
            return
        fi
    fi

    if anything_to_commit; then git add . && git commit -m "$(date)"; fi

    if ! has_remote
    then
        if yes_or_no "No remote set. Do you want to set a GitHub repository?"
        then
            read -p "Repository URL: " url
            git remote add origin "$url" && git branch -M main
        else
            return
        fi
    fi

    git push -u origin main
}


has_remote () {
    cd $directory
    if [ -n "$(git remote)" ]
    then
        true
    else
        false
    fi
}


anything_to_commit () {
    if [ -n "$(git status --porcelain)" ]
    then
        true
    else
        false
    fi
}


is_git_repository () {
    if [ -d "$directory.git" ]
    then
        true
    else
        false
    fi
}


list_files () {
    \ls $directory | xargs -d '\n' -n 1 | fzf --preview "cat $directory{}" --layout=reverse
}


directory_empty () {
    count=$(\ls -A $directory | wc -l)
    if [ $count -eq 0 ]
    then
        echo $no_notes_message
        true
    else
        false
    fi
}


file_selected () {
    if [ "$1" = "$directory" ]
    then
        false
    else
        true
    fi
}


yes_or_no () {
    while true; do
        read -p "$1 [y/n]: " yn
        case $yn in
            [Yy]*) return 0;;
            [Nn]*) return 1;;
        esac
    done
}


while getopts ":a:verp" option; do
    case $option in
        a)  # Add new note
            add "$OPTARG"
            exit;;
        v)  # View file in reader
            if ! directory_empty; then view; fi
            exit;;
        e)  # Edit note
            if ! directory_empty; then edit; fi
            exit;;
        r)  # Remove note
            if ! directory_empty; then remove; fi
            exit;;
        p)  # Push to git repository
            push
            exit;;
        :)  # Error message for options that require an argument
            echo "$program_name -${OPTARG} requires an argument"
            exit 1;;
        \?) # Invalid option
            echo "Invalid option: -${OPTARG}"
            exit 1;;
    esac
done


if ! directory_empty; then
    file=$(echo $directory$(list_files))
    if file_selected $file
    then
        cat "$file"
    fi
fi
