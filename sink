#!/bin/bash


programName="sink"
currentSink=$(pactl get-default-sink)
maxVol="100"
minVol="0"
volIncValue="5"


usage () {

    echo "usage: $programName {-h|-n|-p|-l|-r|-i|-v|-m} (-h for help)"
}


help () {

    echo ""
    usage
    echo ""
    echo "-n:"
    echo "      Next audio sink."
    echo "-p:"
    echo "      Previous audio sink."
    echo "-l:"
    echo "      Print a simple list of all available audio sinks."
    echo "-r:"
    echo "      List all available audio sinks in rofi. They are selectable from the list."
    echo "-i:"
    echo "      Print info about the current (default) audio sink."
    echo "-v:"
    echo "      Volume settings. This option requires parameters:"
    echo "      {up | down | +/-[0-100] | [0-100]}"
    echo "-m:"
    echo "      Mute/unmute the current sink. Optional paramaters:"
    echo "      [0 | 1]"
}


get-current-volume () {

    volString=$(pactl get-sink-volume $(pactl get-default-sink))
    rmBeg=$(sed 's/Volume: front-left: [0-9]* \/[ \t]*//' <<< $volString)
    percent=$(sed 's/ .*//' <<< $rmBeg)
    numberOnly=$(echo $percent | sed 's/%//')
    echo $numberOnly
}


print-volume-percent () {
    
    echo "$(get-current-volume)%"
}


print-info () {
    
    echo "Default sink: $currentSink"
    echo "Volume: $(print-volume-percent)"
}


set-volume () {

    currentVol=$(get-current-volume)

    if [[ $OPTARG == "up" ]]
    then # default increment up
        newVol=$(validate-volume $(( $currentVol + $volIncValue )))
    elif [[ $OPTARG == "down" ]]
    then # default increment down
        newVol=$(validate-volume $(( $currentVol - $volIncValue )))
    elif [[ "$OPTARG" =~ ^[+][0-9]+$ || "$OPTARG" =~ ^[-][0-9]+$ ]]
    then # user defined value of increment
        newVol=$(validate-volume $(( $currentVol + $OPTARG )))
    elif [[ "$OPTARG" =~ ^[0-9]+$ ]]
    then # user specified value - specific value
        newVol=$(validate-volume $OPTARG)
    else
        echo "Invalid argument: $OPTARG ($programName -h for help)"
        exit 1
    fi

    pactl set-sink-volume $currentSink "$newVol%"
    print-volume-percent
}


validate-volume () {

    if [[ $1 -gt $maxVol ]]
    then
        echo $maxVol
    elif [[ $1 -lt $minVol ]]
    then
        echo $minVol
    else
        echo $1
    fi
}


mute () {

    isMuted=$(pactl get-sink-mute $currentSink)
    
    if [[ $# == 0 ]]
    then

        if [[  $isMuted == "Mute: no" ]]; then
            muteState=1
        else
            muteState=0
        fi

    else
        if [[ $1 == 0 || $1 == 1 ]]; then
            muteState=$1
        else
            echo "Invalid argument: $1. $programName -m takes optional paramater of 0 or 1"
            exit 1
        fi
    fi

    pactl set-sink-mute $currentSink $muteState
    pactl get-sink-mute $currentSink
}


change-sink () {

    sinkArray=($(list-sinks))
    length=${#sinkArray[@]}
    index=0
    newIndex=0

    while [[ $index < $length ]]
    do
        if [[ $currentSink == ${sinkArray[$index]} ]]
        then
            newIndex=$(( $index + $1 ))
            break
        fi
        index=$(( $index + 1 ))
    done


    if [[ $newIndex > $(( $length - 1 )) ]]
    then
        pactl set-default-sink ${sinkArray[0]}
    elif [[ $newIndex < 0 ]]
    then
        pactl set-default-sink ${sinkArray[$length - 1]}
    else
        pactl set-default-sink ${sinkArray[$newIndex]}
    fi
    pactl get-default-sink
}


list-sinks () {
    
    pactl list sinks |
        grep Name: |
        sed 's/Name: //' |
        sed 's/^[ \t]*//'
}


list-sinks-in-rofi () {
    
    title="Audio Sinks"

    pactl set-default-sink $(
        list-sinks |
        rofi -dmenu -window-title $title
    )
}


while getopts ":hpnlriv:m" option; do
    case $option in
        h)  # Help
            help
            exit;;
        i)  # Get current sink info
            print-info
            exit;;
        n)  # Next sink
            change-sink 1
            exit;;
        p)  # Previous sink
            change-sink -1
            exit;;
        l)  # List sinks
            list-sinks
            exit;;
        r)  # Rofi
            list-sinks-in-rofi
            exit;;
        v)  # Set volume - needs argument
            set-volume
            exit;;
        m)  # Mute/unmute current sink
            mute $2
            exit;;
        :)  # Error message for options that require argument
            echo "$programName -${OPTARG} requires an argument"
            exit 1;;
        \?) # Invalid option
            echo "Invalid option: -${OPTARG} ($programName -h for help)"
            exit 1;;
    esac
done

usage
